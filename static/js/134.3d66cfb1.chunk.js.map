{"version":3,"file":"static/js/134.3d66cfb1.chunk.js","mappings":"0JAWA,IARA,YAAsC,IAAfA,EAAc,EAAdA,KAAOC,EAAO,EAAPA,KAC5B,OACE,SAAC,IAAD,CAAkBC,GAAE,kBAAaF,EAAKG,IAAMF,KAAMA,EAAlD,SACGD,EAAKI,MAAQJ,EAAKK,OAASL,EAAKM,eAAiBN,EAAKO,gBAG5D,C,6GCJc,SAASC,EAAT,GAAmD,IAAvBN,EAAsB,EAAtBA,GAAIO,EAAkB,EAAlBA,SAAUR,EAAQ,EAARA,KACvD,OACE,SAACS,EAAD,CAAYR,GAAIA,EAAIS,MAAO,CAAEV,KAAAA,GAA7B,SACGQ,GAGN,CAED,IAAMC,GAAaE,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uH,oICuChB,UA5CA,WACE,OAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,MAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAiBF,EAAaG,IAAI,eAClCC,GAAWC,EAAAA,EAAAA,MAuBjB,OARAC,EAAAA,EAAAA,YAAU,WACRJ,GAAkBK,EAAAA,EAAAA,iBAA8BL,GAAgBM,MAAK,SAAAC,GACnEX,EAAgBW,EACjB,IACDb,EAAeM,EAChB,GAAE,CAACA,KAIF,4BACE,kBAAMQ,SAvBgB,SAACC,GACzBA,EAAEC,iBACkB,KAAhBjB,GACFkB,IAAAA,OAAAA,QAAwB,mBAE1BZ,EAAgB,CAAEN,YAAAA,IACdG,EAAgBgB,OAAS,GAC3BD,IAAAA,OAAAA,QAAA,oEAAqFlB,EAArF,KAEH,EAcsCoB,UAAU,cAA7C,WACE,kBAAOC,SAdoB,SAACL,GAChCf,EAAee,EAAEM,OAAOC,MACzB,EAYgDC,KAAK,OAAOC,YAAY,iCAC5DF,MAAOvB,GAAe,MAC7B,mBAAQwB,KAAK,SAASJ,UAAU,gBAAhC,sBAEF,eAAIA,UAAU,YAAd,SACGlB,GAAgBA,EAAawB,KAAI,SAACzC,GAAD,OAAU,yBAC1C,SAAC,IAAD,CAAcA,KAAMA,EAAMC,KAAMuB,MADmBkB,EAAAA,EAAAA,MAAnB,QAMzC,C,qCCjDKC,EAAM,mCAuCNhB,EAAe,CACnBiB,mBAtCyB,WACzB,OAAOC,EAAAA,EAAAA,IAAA,gEACyDF,IAC7Df,MAAK,qBAAGC,KAAgBiB,OAAnB,GACT,EAmCCC,iBAjCuB,SAAC3C,GACxB,OAAOyC,EAAAA,EAAAA,IAAA,4DAEkDF,EAFlD,iCAE8EvC,EAF9E,gCAIJwB,MAAK,qBAAGC,KAAgBiB,OAAnB,GACT,EA4BCE,cA1BoB,SAAC7C,GACrB,OAAO0C,EAAAA,EAAAA,IAAA,6CAEmC1C,EAFnC,oBAEiDwC,EAFjD,oBAIJf,MAAK,SAACqB,GAAD,OAAcA,EAASpB,IAAvB,GACT,EAqBCqB,cAnBoB,SAAC/C,GACrB,OAAO0C,EAAAA,EAAAA,IAAA,6CAEmC1C,EAFnC,4BAEyDwC,EAFzD,oBAIJf,MAAK,SAACqB,GAAD,OAAcA,EAASpB,KAAKsB,IAA5B,GACT,EAcCC,gBAZsB,SAACjD,GACvB,OAAO0C,EAAAA,EAAAA,IAAA,6CAEmC1C,EAFnC,4BAEyDwC,EAFzD,2BAIJf,MAAK,SAACqB,GAAD,OAAcA,EAASpB,KAAKiB,OAA5B,GACT,GAQD,K","sources":["components/FilmListItem.jsx","helpers/NavLinkComponent.jsx","pages/Movies.jsx","services/movieFetchService.jsx"],"sourcesContent":["import React from 'react';\nimport NavLinkComponent from '../helpers/NavLinkComponent';\n\nfunction FilmListItem({film , from}) {\n  return (\n    <NavLinkComponent to={`/movies/${film.id}`} from={from}>\n      {film.name || film.title || film.original_name || film.original_title}\n    </NavLinkComponent>\n  );\n}\n\nexport default FilmListItem;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\n\nexport default function NavLinkComponent({ to, children, from }) {\n  return (\n    <StyledLink to={to} state={{ from }}>\n      {children}\n    </StyledLink>\n  );\n}\n\nconst StyledLink = styled(NavLink)`\n  color: black;\n\n  &.active {\n    color: orange;\n    border-bottom: 2px solid orange;\n  }\n`;\n\n","import React, { useEffect, useState } from 'react';\nimport fetchService from '../services/movieFetchService';\nimport { nanoid } from 'nanoid';\nimport FilmListItem from '../components/FilmListItem';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix'\n\n\nfunction Movies() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filmsByQuery, setFilmsByQuery] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchURLQuery = searchParams.get('searchQuery');\n  const location = useLocation();\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n    if (searchQuery === '') {\n      Notiflix.Notify.warning('Enter film name');\n    }\n    setSearchParams({ searchQuery });\n    if (setFilmsByQuery.length < 1){\n      Notiflix.Notify.warning(`our service knows nothing about the movie with the title \"${searchQuery}\"`);\n    }\n  };\n  const changeSearchQueryHandler = (e) => {\n    setSearchQuery(e.target.value);\n  };\n  useEffect(() => {\n    searchURLQuery && fetchService.fetchFilmsByName(searchURLQuery).then(data => {\n      setFilmsByQuery(data);\n    });\n    setSearchQuery(searchURLQuery)\n  }, [searchURLQuery]);\n\n\n  return (\n    <div>\n      <form onSubmit={formSubmitHandler} className='search-form'>\n        <input onChange={changeSearchQueryHandler} type='text' placeholder='What movie are we looking for?'\n               value={searchQuery || ''} />\n        <button type='submit' className='styled-button'>FIND</button>\n      </form>\n      <ul className='film-list'>\n        {filmsByQuery && filmsByQuery.map((film) => <li key={nanoid()}>\n          <FilmListItem film={film} from={location} />\n        </li>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default Movies;\n","import axios from \"axios\";\nconst key = \"f87fb9311e8c4be1eab05e1500732ab3\";\n\nconst fetchTrendingFilms = () => {\n  return axios\n    .get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n    .then(({ data }) => data.results);\n};\n\nconst fetchFilmsByName = (name) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&query=${name}&page=1&include_adult=false`\n    )\n    .then(({ data }) => data.results);\n};\n\nconst fetchFilmById = (id) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`\n    )\n    .then((response) => response.data);\n};\n\nconst fetchFilmCast = (id) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${key}&language=en-US`\n    )\n    .then((response) => response.data.cast);\n};\n\nconst fetchFilmReview = (id) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`\n    )\n    .then((response) => response.data.results);\n};\nconst fetchService = {\n  fetchTrendingFilms,\n  fetchFilmsByName,\n  fetchFilmById,\n  fetchFilmCast,\n  fetchFilmReview,\n};\nexport default fetchService;\n"],"names":["film","from","to","id","name","title","original_name","original_title","NavLinkComponent","children","StyledLink","state","styled","NavLink","useState","searchQuery","setSearchQuery","filmsByQuery","setFilmsByQuery","useSearchParams","searchParams","setSearchParams","searchURLQuery","get","location","useLocation","useEffect","fetchService","then","data","onSubmit","e","preventDefault","Notiflix","length","className","onChange","target","value","type","placeholder","map","nanoid","key","fetchTrendingFilms","axios","results","fetchFilmsByName","fetchFilmById","response","fetchFilmCast","cast","fetchFilmReview"],"sourceRoot":""}