{"version":3,"file":"static/js/934.98b60270.chunk.js","mappings":"8NA6BA,UAxBA,WACE,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,MAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,oGACDC,EAAAA,EAAAA,gBAA6BP,GAD5B,OAChBQ,EADgB,OAEtBJ,EAAcI,GAFQ,2CAAH,qDAIrBF,IAAkBG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GAC5B,GAAE,CAACV,KAEF,iBAAKa,UAAU,mBAAf,UACGV,GAAcA,EAAWW,KAAI,SAACN,GAAD,OAC5B,iBAAKK,UAAU,SAAf,WACE,wBAAKL,EAAOO,UACZ,uBAAIP,EAAOQ,WACX,cAAGC,KAAMT,EAAOU,IAAhB,0BAH2BC,EAAAA,EAAAA,MADD,IAM7BhB,GAAcA,EAAWiB,OAAS,IAAK,0EAG7C,C,qCC1BKC,EAAM,mCAuCNd,EAAe,CACnBe,mBAtCyB,WACzB,OAAOC,EAAAA,EAAAA,IAAA,gEACyDF,IAC7DG,MAAK,qBAAGC,KAAgBC,OAAnB,GACT,EAmCCC,iBAjCuB,SAACC,GACxB,OAAOL,EAAAA,EAAAA,IAAA,4DAEkDF,EAFlD,iCAE8EO,EAF9E,gCAIJJ,MAAK,qBAAGC,KAAgBC,OAAnB,GACT,EA4BCG,cA1BoB,SAACC,GACrB,OAAOP,EAAAA,EAAAA,IAAA,6CAEmCO,EAFnC,oBAEiDT,EAFjD,oBAIJG,MAAK,SAACO,GAAD,OAAcA,EAASN,IAAvB,GACT,EAqBCO,cAnBoB,SAACF,GACrB,OAAOP,EAAAA,EAAAA,IAAA,6CAEmCO,EAFnC,4BAEyDT,EAFzD,oBAIJG,MAAK,SAACO,GAAD,OAAcA,EAASN,KAAKQ,IAA5B,GACT,EAcC3B,gBAZsB,SAACwB,GACvB,OAAOP,EAAAA,EAAAA,IAAA,6CAEmCO,EAFnC,4BAEyDT,EAFzD,2BAIJG,MAAK,SAACO,GAAD,OAAcA,EAASN,KAAKC,OAA5B,GACT,GAQD,K,uBC/CA,SAASQ,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQlB,EAAKmB,GACpE,IACE,IAAIC,EAAON,EAAId,GAAKmB,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAN,EAAOM,EAET,CAEIF,EAAKG,KACPR,EAAQM,GAERG,QAAQT,QAAQM,GAAOlB,KAAKc,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMI,GACbR,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQG,EAClE,CAEA,SAASH,EAAO7B,GACdwB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAAS7B,EACnE,CAEA4B,OAAMe,EACR,GACF,CACF,C,uFCjCO,IAkBIlC,EAAS,eAACmC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC5B,EAAI6B,GAWvD,OARE7B,IAFF6B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Review.jsx","services/movieFetchService.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useParams } from 'react-router-dom';\nimport fetchService from '../services/movieFetchService';\n\nfunction Review() {\n  const { movieId } = useParams();\n  const [filmReview, setFilmReview] = useState(null);\n\n  useEffect(() => {\n    const fetchFilmReview = async () => {\n      const review = await fetchService.fetchFilmReview(movieId);\n      setFilmReview(review);\n    };\n    fetchFilmReview().catch(err => console.log(err));\n  }, [movieId]);\n  return (\n    <div className='review-container'>\n      {filmReview && filmReview.map((review) =>\n        <div className='review' key={nanoid()}>\n          <h3>{review.author}</h3>\n          <p>{review.content}</p>\n          <a href={review.url}>Read More</a>\n        </div>)}\n      {filmReview && filmReview.length < 1 && <p>We don`t have any reviews for this movie yet</p>}\n    </div>\n  );\n}\n\nexport default Review;\n","import axios from \"axios\";\nconst key = \"f87fb9311e8c4be1eab05e1500732ab3\";\n\nconst fetchTrendingFilms = () => {\n  return axios\n    .get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n    .then(({ data }) => data.results);\n};\n\nconst fetchFilmsByName = (name) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&query=${name}&page=1&include_adult=false`\n    )\n    .then(({ data }) => data.results);\n};\n\nconst fetchFilmById = (id) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`\n    )\n    .then((response) => response.data);\n};\n\nconst fetchFilmCast = (id) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${key}&language=en-US`\n    )\n    .then((response) => response.data.cast);\n};\n\nconst fetchFilmReview = (id) => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`\n    )\n    .then((response) => response.data.results);\n};\nconst fetchService = {\n  fetchTrendingFilms,\n  fetchFilmsByName,\n  fetchFilmById,\n  fetchFilmCast,\n  fetchFilmReview,\n};\nexport default fetchService;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","filmReview","setFilmReview","useEffect","fetchFilmReview","fetchService","review","catch","err","console","log","className","map","author","content","href","url","nanoid","length","key","fetchTrendingFilms","axios","then","data","results","fetchFilmsByName","name","fetchFilmById","id","response","fetchFilmCast","cast","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}